[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 shiny.leptos authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"ixpantia, SRL. Copyright holder. Andres Quintero. Author, maintainer. authors dependency Rust crates. Contributor.           see inst/AUTHORS file details","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Quintero (2025). shiny.leptos: Build Custom Shiny Inputs Rust, Leptos, WebAssembly. R package version 0.1.0.9000, https://github.com/ixpantia/shiny.leptos.","code":"@Manual{,   title = {shiny.leptos: Build Custom Shiny Inputs with Rust, Leptos, and WebAssembly},   author = {Andres Quintero},   year = {2025},   note = {R package version 0.1.0.9000},   url = {https://github.com/ixpantia/shiny.leptos}, }"},{"path":"/index.html","id":"shinyleptos","dir":"","previous_headings":"","what":"Build Custom Shiny Inputs with Rust, Leptos, and WebAssembly","title":"Build Custom Shiny Inputs with Rust, Leptos, and WebAssembly","text":"Create Custom Shiny Inputs Outputs Rust, Leptos, WebAssembly shiny.leptos provides framework tooling within R build custom Shiny input output components using Leptos Rust framework, compiling WebAssembly (WASM) high-performance, interactive front-end elements within Shiny applications. package helps : Initialize: Set necessary directory structure (srcrs, srcts, srcsass) configuration files (Cargo.toml, package.json, vite.config.js, etc.) Rust/Leptos TypeScript development within R package. Scaffold: Generate template files (Rust, TypeScript, R) new custom input output components. Build: Compile Rust/Leptos code WASM, bundle TypeScript bindings using Vite, compile Sass/SCSS stylesheets single CSS file, placing outputs correct inst/ subdirectory R package.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Build Custom Shiny Inputs with Rust, Leptos, and WebAssembly","text":"can install development version shiny.leptos GitHub : Prerequisites Development: create components using shiny.leptos within R package, need following installed system: Rust Toolchain: Install via rustup. WASM Target Rust: rustup target add wasm32-unknown-unknown wasm-pack: cargo install wasm-pack Node.js Yarn: Install Node.js (includes npm) nodejs.org, install Yarn: npm install -g yarn Sass: Install Dart Sass executable (see sass-lang.com/install). Ensure sass command available system’s PATH.","code":"# install.packages(\"remotes\") remotes::install_github(\"ixpantia/shiny.leptos\")"},{"path":"/index.html","id":"core-workflow","dir":"","previous_headings":"","what":"Core Workflow","title":"Build Custom Shiny Inputs with Rust, Leptos, and WebAssembly","text":"Initialize Package: Navigate root directory R package terminal R console run: r     shiny.leptos::init() sets srcrs/, srcts/, srcsass/, / directories necessary config files. also adds directories .Rbuildignore. Create New Component: Input Component: Use new_input_component() generate basic files. example, create component named my_counter: r     shiny.leptos::new_input_component(\"my_counter\") create R/my_counter.R, srcrs/src/my_counter.rs, srcts/src/my_counter.ts. Output Component: Use new_output_component() similarly. example, create my_plot: r     shiny.leptos::new_output_component(\"my_plot\") create R/my_plot.R (my_plot_output render_my_plot), srcrs/src/my_plot.rs, srcts/src/my_plot.ts. functions update srcrs/src/lib.rs srcts/src/index.ts include new component. Implement Component: Edit generated .rs file (srcrs/src/) implement desired appearance behavior using Leptos. Modify generated .ts file (srcts/src/) default Shiny input/output binding needs adjustments. Customize generated .R file (R/) set appropriate default values add specific arguments R functions (UI, update/render). Optionally, add styles component srcsass/. Build Assets: root package, run build command: r     shiny.leptos::build()     # run individual steps:     # shiny.leptos::build_sass()     # shiny.leptos::build_rs() # Called build_ts     # shiny.leptos::build_ts() compiles Sass, builds Rust WASM package, installs/updates WASM dependency, bundles TypeScript/JavaScript. final assets (*.js, style.css) placed inst/dist/. Document Use: Run devtools::document() generate documentation update package’s NAMESPACE. Use devtools::install() install package locally. Use new component Shiny app like input output!","code":""},{"path":"/index.html","id":"example-usage-input","dir":"","previous_headings":"","what":"Example Usage (Input)","title":"Build Custom Shiny Inputs with Rust, Leptos, and WebAssembly","text":"Let’s assume created leptos_button input component, implemented , built/installed package yourPackageName. Creating using custom output follows similar pattern, using new_output_component, implementing Rust view R render/UI functions, building, using yourPackageName::my_output_output() UI output$myOutput <- yourPackageName::render_my_output({...}) server.","code":"# app.R library(shiny) library(yourPackageName) # Replace with your package name  ui <- fluidPage(   leptos_button(\"myButton1\", value = 5),   hr(),   verbatimTextOutput(\"button1Value\"),   actionButton(\"reset\", \"Reset Button 1\") )  server <- function(input, output, session) {   output$button1Value <- renderPrint({     paste(\"Button 1 Value:\", input$myButton1)   })    observe({     update_leptos_button(\"myButton1\", value = 0)   }) |> bindEvent(input$reset) }  shinyApp(ui, server)"},{"path":"/index.html","id":"key-functions","dir":"","previous_headings":"","what":"Key Functions","title":"Build Custom Shiny Inputs with Rust, Leptos, and WebAssembly","text":"init(): Initializes required directory structure configuration files. new_input_component(component_name): Creates scaffolding new input component. new_output_component(component_name): Creates scaffolding new output component. build(): Runs full build process (Sass, Rust/WASM, TypeScript/Vite).","code":""},{"path":"/index.html","id":"project-structure","dir":"","previous_headings":"","what":"Project Structure","title":"Build Custom Shiny Inputs with Rust, Leptos, and WebAssembly","text":"running init(), package key directories: srcrs/: Rust source code (Leptos components). srcts/: TypeScript source code (Shiny bindings). srcsass/: Sass/SCSS files styling. /: (Generated) Compiled WASM package, used srcts. inst/dist/: (Generated) Final JS CSS assets R package. Cargo.toml: (Root) Rust workspace definition. R/: Generated R functions UI server interaction.","code":""},{"path":"/index.html","id":"authors","dir":"","previous_headings":"","what":"Authors","title":"Build Custom Shiny Inputs with Rust, Leptos, and WebAssembly","text":"ixpantia, SRL (Copyright Holder) hola@ixpantia.com Andres Quintero (Author, Creator) andres@ixpantia.com","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Build Custom Shiny Inputs with Rust, Leptos, and WebAssembly","text":"MIT License See LICENSE file details.","code":""},{"path":"/reference/build.html","id":null,"dir":"Reference","previous_headings":"","what":"Run all build tasks: Sass, Rust, and TypeScript — build","title":"Run all build tasks: Sass, Rust, and TypeScript — build","text":"Run build tasks: Sass, Rust, TypeScript","code":""},{"path":"/reference/build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run all build tasks: Sass, Rust, and TypeScript — build","text":"","code":"build(package_name = NULL, path = \".\")"},{"path":"/reference/build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run all build tasks: Sass, Rust, and TypeScript — build","text":"package_name Name package. NULL, attempts detect DESCRIPTION. path Path package root. Default: \".\"","code":""},{"path":"/reference/build_rs.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Rust WASM package — build_rs","title":"Build Rust WASM package — build_rs","text":"Build Rust WASM package","code":""},{"path":"/reference/build_rs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Rust WASM package — build_rs","text":"","code":"build_rs(package_name = get_pkg_name(path), dir = \"srcrs\", path = \".\")"},{"path":"/reference/build_rs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Rust WASM package — build_rs","text":"package_name Name package (used name output directory) dir Directory containing Rust sources. Default: \"srcrs\" path Path package root. Default: \".\"","code":""},{"path":"/reference/build_sass.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Sass assets for the package — build_sass","title":"Build Sass assets for the package — build_sass","text":"Build Sass assets package","code":""},{"path":"/reference/build_sass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Sass assets for the package — build_sass","text":"","code":"build_sass(package_name = get_pkg_name(path), dir = \"srcsass\", path = \".\")"},{"path":"/reference/build_sass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Sass assets for the package — build_sass","text":"package_name Name package (used locate inst directories) dir Directory containing Sass sources. Default: \"srcsass\" path Path package root. Default: \".\"","code":""},{"path":"/reference/build_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Build TypeScript assets (depends on Rust WASM) — build_ts","title":"Build TypeScript assets (depends on Rust WASM) — build_ts","text":"Build TypeScript assets (depends Rust WASM)","code":""},{"path":"/reference/build_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build TypeScript assets (depends on Rust WASM) — build_ts","text":"","code":"build_ts(package_name = get_pkg_name(path), dir = \"srcts\", path = \".\")"},{"path":"/reference/build_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build TypeScript assets (depends on Rust WASM) — build_ts","text":"package_name Name package (used upgrade WASM dependency) dir Directory containing TypeScript sources. Default: \"srcts\" path Path package root. Default: \".\"","code":""},{"path":"/reference/generic_component_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Create scaffolding for a new Leptos Component — generic_component_init","title":"Create scaffolding for a new Leptos Component — generic_component_init","text":"function creates necessary R, Rust, TypeScript files new input output component based generic template.","code":""},{"path":"/reference/generic_component_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create scaffolding for a new Leptos Component — generic_component_init","text":"","code":"new_input_component(component_name, path = \".\")  new_output_component(component_name, path = \".\")"},{"path":"/reference/generic_component_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create scaffolding for a new Leptos Component — generic_component_init","text":"component_name name new component (e.g., \"my_slider\"). converted snake_case CamelCase needed. path Path root R package. Default current directory.","code":""},{"path":"/reference/get_pkg_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the name of the package from DESCRIPTION — get_pkg_name","title":"Get the name of the package from DESCRIPTION — get_pkg_name","text":"Get name package DESCRIPTION","code":""},{"path":"/reference/get_pkg_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the name of the package from DESCRIPTION — get_pkg_name","text":"","code":"get_pkg_name(path = \".\")"},{"path":"/reference/get_pkg_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the name of the package from DESCRIPTION — get_pkg_name","text":"path Path package directory. Default current working directory.","code":""},{"path":"/reference/get_pkg_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the name of the package from DESCRIPTION — get_pkg_name","text":"name package string.","code":""},{"path":"/reference/init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize shiny.leptos structure in a package — init","title":"Initialize shiny.leptos structure in a package — init","text":"Sets necessary directories template files using shiny.leptos R package.","code":""},{"path":"/reference/init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize shiny.leptos structure in a package — init","text":"","code":"init(path = \".\")"},{"path":"/reference/init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize shiny.leptos structure in a package — init","text":"path Path root R package. Default current directory.","code":""}]
